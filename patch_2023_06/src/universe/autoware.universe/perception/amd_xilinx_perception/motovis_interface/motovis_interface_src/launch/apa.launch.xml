<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <!-- Essential parameters -->
  <arg name="vehicle_model" description="vehicle model name"/>
  <arg name="sensor_model" description="sensor model name"/>

  <arg name="launch_vehicle" default="false" description="launch vehicle module"/>
  <arg name="launch_system" default="false" description="launch system module"/>
  <arg name="launch_simulator" default="false" description="launch simulation module"/>
  <arg name="launch_planning" default="false" description="launch planning module"/>
  <arg name="launch_control" default="false" description="launch control module"/>
  <arg name="launch_api" default="false" description="launch api module"/>
  <arg name="launch_viz" default="false" description="launch vizualization module"/>
  <arg name="launch_sensing" default="false" description="launch sensing module"/>
  <arg name="launch_localization" default="false" description="launch localization module"/>
  <arg name="launch_joy" default="false" description="launch joystick controller module"/>
  <arg name="launch_perception" default="false" description="launch perception module"/>

  <!-- Optional parameters -->
  <!-- Map -->
  <arg name="lanelet2_map_file" default="lanelet2_map.osm" description="lanelet2 map file name"/>
  <arg name="pointcloud_map_file" default="pointcloud_map.pcd" description="pointcloud map file name"/>
  <!-- Tools -->
  <arg name="rviz" default="true" description="launch rviz"/>
  <arg name="rviz_config" default="$(find-pkg-share autoware_launch)/rviz/apa.rviz" description="rviz config"/>
  <!-- Control -->
  <arg name="enable_obstacle_collision_checker" default="false" description="use obstacle_collision_checker"/>
  <arg name="check_external_emergency_heartbeat" default="false"/>
  <!-- Scenario simulation -->
  <arg name="initial_engage_state" default="true" description="/vehicle/engage state after starting Autoware"/>
  <arg name="perception/enable_detection_failure" default="true" description="enable to simulate detection failure when using dummy perception"/>
  <arg name="perception/enable_object_recognition" default="true" description="enable object recognition when using dummy perception"/>
  <arg name="sensing/visible_range" default="300.0" description="visible range when using dummy perception"/>
  <arg name="scenario_simulation" default="false" description="use scenario simulation"/>
  <!-- Vcu emulation -->
  <arg name="vehicle_simulation" default="false" description="use vehicle simulation"/>
  <arg name="vehicle_id" default="0"/>
  <!--Planning-->
  <arg name="common_param_path" default="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/common/common.param.yaml"/>
  <arg name="nearest_search_param_path" default="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/common/nearest_search.param.yaml"/>
  <arg name="motion_velocity_smoother_param_path" default="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/common/motion_velocity_smoother/motion_velocity_smoother.param.yaml"/>
  <arg name="tier4_planning_launch_param_path" default="$(find-pkg-share tier4_planning_launch)/config"/>	
  <!-- System -->
  <arg name="system_run_mode" default="apa" description="run mode in system"/>
  <arg name="launch_system_monitor" default="true" description="launch system monitor"/>
  <arg name="launch_dummy_diag_publisher" default="false" description="launch dummy diag publisher"/>
  <!--sensing-->
  <arg name="coordinate_system" default="1" description="0:UTM, 1:MGRS, 2:PLANE"/>
  <!--localization-->
  <arg name="localization_error_monitor_param_path" default="$(find-pkg-share autoware_launch)/config/localization/localization_error_monitor.param.yaml"/>
  <!-- API -->
  <arg name="launch_default_ad_api" default="true"/>
  <arg name="launch_rviz_adaptors" default="true"/>


  <!-- Global parameters -->
  <group scoped="false">
    <include file="$(find-pkg-share global_parameter_loader)/launch/global_params.launch.py">
      <arg name="use_sim_time" value="false"/>
      <arg name="vehicle_model" value="$(var vehicle_model)"/>
    </include>
  </group>

  <!-- Vehicle -->
  <group if="$(var launch_vehicle)">
	  <let name="launch_vehicle_interface" value="false" if="$(var vehicle_simulation)"/>
	  <let name="launch_vehicle_interface" value="true" unless="$(var vehicle_simulation)"/>

	  <include file="$(find-pkg-share tier4_vehicle_launch)/launch/vehicle.launch.xml">
		  <arg name="vehicle_model" value="$(var vehicle_model)"/>
		  <arg name="sensor_model" value="$(var sensor_model)"/>
		  <arg name="launch_vehicle_interface" value="$(var launch_vehicle_interface)"/>
	  </include>
  </group>

  <!-- System -->
  <group if="$(var launch_system)" >
    <include file="$(find-pkg-share tier4_system_launch)/launch/system.launch.xml">
    <arg name="run_mode" value="$(var system_run_mode)"/>
    <arg name="launch_system_monitor" value="$(var launch_system_monitor)"/>
    <arg name="launch_dummy_diag_publisher" value="$(var launch_dummy_diag_publisher)"/>
    <arg name="sensor_model" value="$(var sensor_model)"/>

    <arg name="component_state_monitor_topic_path" value="$(find-pkg-share autoware_launch)/config/system/component_state_monitor/topics.yaml"/>
    <arg name="emergency_handler_param_path" value="$(find-pkg-share autoware_launch)/config/system/emergency_handler/emergency_handler.param.yaml"/>
    <arg name="mrm_comfortable_stop_operator_param_path" value="$(find-pkg-share autoware_launch)/config/system/mrm_comfortable_stop_operator/mrm_comfortable_stop_operator.param.yaml"/>
    <arg name="mrm_emergency_stop_operator_param_path" value="$(find-pkg-share autoware_launch)/config/system/mrm_emergency_stop_operator/mrm_emergency_stop_operator.param.yaml"/>
    <arg name="system_error_monitor_param_path" value="$(find-pkg-share autoware_launch)/config/system/system_error_monitor/system_error_monitor.param.yaml"/>
    <arg name="system_error_monitor_planning_simulator_param_path" value="$(find-pkg-share autoware_launch)/config/system/system_error_monitor/system_error_monitor.planning_simulator.param.yaml"/>
    <arg name="system_error_monitor_apa_param_path" value="$(find-pkg-share autoware_launch)/config/system/system_error_monitor/system_error_monitor.apa.param.yaml"/>
    <arg name="diagnostic_aggregator_vehicle_param_path" value="$(find-pkg-share autoware_launch)/config/system/system_error_monitor/diagnostic_aggregator/vehicle.param.yaml"/>
    <arg name="diagnostic_aggregator_system_param_path" value="$(find-pkg-share autoware_launch)/config/system/system_error_monitor/diagnostic_aggregator/system.param.yaml"/>
    <arg name="dummy_diag_publisher_param_path" value="$(find-pkg-share autoware_launch)/config/system/dummy_diag_publisher/dummy_diag_publisher.param.yaml"/>
    <arg name="system_monitor_cpu_monitor_param_path" value="$(find-pkg-share autoware_launch)/config/system/system_monitor/cpu_monitor.param.yaml"/>
    <arg name="system_monitor_gpu_monitor_param_path" value="$(find-pkg-share autoware_launch)/config/system/system_monitor/gpu_monitor.param.yaml"/>
    <arg name="system_monitor_hdd_monitor_param_path" value="$(find-pkg-share autoware_launch)/config/system/system_monitor/hdd_monitor.param.yaml"/>
    <arg name="system_monitor_mem_monitor_param_path" value="$(find-pkg-share autoware_launch)/config/system/system_monitor/mem_monitor.param.yaml"/>
    <arg name="system_monitor_net_monitor_param_path" value="$(find-pkg-share autoware_launch)/config/system/system_monitor/net_monitor.param.yaml"/>
    <arg name="system_monitor_ntp_monitor_param_path" value="$(find-pkg-share autoware_launch)/config/system/system_monitor/ntp_monitor.param.yaml"/>
    <arg name="system_monitor_process_monitor_param_path" value="$(find-pkg-share autoware_launch)/config/system/system_monitor/process_monitor.param.yaml"/>
    <arg name="system_monitor_voltage_monitor_param_path" value="$(find-pkg-share autoware_launch)/config/system/system_monitor/voltage_monitor.param.yaml"/>
    </include>
  </group>

  <!-- Simulator -->
  <group if="$(var launch_simulator)">
	  <let name="launch_dummy_perception" value="true"/>
	  <let name="launch_dummy_vehicle" value="true"/>
	  <let name="launch_dummy_localization" value="true"/>
	  <let name="launch_diagnostic_converter" value="$(var scenario_simulation)"/>

	  <include file="$(find-pkg-share tier4_simulator_launch)/launch/simulator.launch.xml">
		  <arg name="launch_dummy_perception" value="$(var launch_dummy_perception)"/>
		  <arg name="launch_dummy_vehicle" value="$(var launch_dummy_vehicle)"/>
		  <arg name="launch_dummy_localization" value="$(var launch_dummy_localization)"/>
		  <arg name="launch_diagnostic_converter" value="$(var launch_diagnostic_converter)"/>
		  <arg name="perception/enable_detection_failure" value="$(var perception/enable_detection_failure)"/>
		  <arg name="perception/enable_object_recognition" value="$(var perception/enable_object_recognition)"/>
		  <arg name="sensing/visible_range" value="$(var sensing/visible_range)"/>
		  <arg name="vehicle_model" value="$(var vehicle_model)"/>
		  <arg name="initial_engage_state" value="$(var initial_engage_state)"/>
		  <arg name="vehicle_info_param_file" value="$(find-pkg-share $(var vehicle_model)_description)/config/vehicle_info.param.yaml"/>
		  
		  <arg name="fault_injection_param_path" value="$(find-pkg-share autoware_launch)/config/simulator/fault_injection.param.yaml"/>
		  <arg
			  name="obstacle_segmentation_ground_segmentation_elevation_map_param_path"
			  value="$(find-pkg-share autoware_launch)/config/perception/obstacle_segmentation/ground_segmentation/elevation_map_parameters.yaml"
			  />
		  <arg
			  name="object_recognition_tracking_multi_object_tracker_data_association_matrix_param_path"
			  value="$(find-pkg-share autoware_launch)/config/perception/object_recognition/tracking/multi_object_tracker/data_association_matrix.param.yaml"
			  />
		 <arg name="pose_initializer_common_param_path" value="$(find-pkg-share autoware_launch)/config/localization/pose_initializer_common.param.yaml"/>
                 <arg name="pose_initializer_param_path" value="$(find-pkg-share autoware_launch)/config/localization/pose_initializer.planning_simulator.param.yaml"/>
	         <arg name="laserscan_based_occupancy_grid_map_param_path" value="$(find-pkg-share autoware_launch)/config/perception/occupancy_grid_map/laserscan_based_occupancy_grid_map.param.yaml"/>
	  </include>
  </group>

  <!-- planning -->
  <group if="$(var launch_planning)">
          <push-ros-namespace namespace="planning"/>
          <!-- mission planning module -->
          <group>
                  <push-ros-namespace namespace="mission_planning"/>
                  <include file="$(find-pkg-share tier4_planning_launch)/launch/mission_planning/mission_planning.launch.xml"/>
          </group>

          <!-- velocity planning with max velocity, acceleration, jerk, stop point constraint -->
          <group>
                  <push-ros-namespace namespace="scenario_planning"/>

                  <!-- external velocity limit selector -->
                  <group>
                          <include file="$(find-pkg-share external_velocity_limit_selector)/launch/external_velocity_limit_selector.launch.xml">
                                  <arg name="common_param_path" value="$(var common_param_path)"/>
                                  <arg name="param_path" value="$(var motion_velocity_smoother_param_path)"/>
                          </include>
                  </group>
                  <!-- motion velocity smoother -->
                  <group>
                          <arg name="smoother_type" default="JerkFiltered" description="options: JerkFiltered, L2, Analytical, Linf(Unstable)"/>
                          <arg name="smoother_type_param_path" default="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/common/motion_velocity_smoother/$(var smoother_type).param.yaml"/>
                          <set_remap from="~/input/trajectory" to="/planning/scenario_planning/parking/trajectory"/>
                          <set_remap from="~/output/trajectory" to="/planning/scenario_planning/motion_velocity_smoother/trajectory"/>
                          <include file="$(find-pkg-share motion_velocity_smoother)/launch/motion_velocity_smoother.launch.xml">
                                  <arg name="smoother_type" value="$(var smoother_type)"/>
                                  <arg name="common_param_path" value="$(var common_param_path)"/>
                                  <arg name="nearest_search_param_path" value="$(var nearest_search_param_path)"/>
                                  <arg name="param_path" value="$(var motion_velocity_smoother_param_path)"/>
                                  <arg name="smoother_param_path" value="$(var smoother_type_param_path)"/>
                          </include>
                  </group>

                  <group>
                          <!-- parking -->
                          <include file="$(find-pkg-share tier4_planning_launch)/launch/scenario_planning/parking.launch.py">
                                  <arg name="vehicle_info_param_file" value="$(find-pkg-share $(var vehicle_model)_description)/config/vehicle_info.param.yaml"/>
                                  <arg name="freespace_planner_param_path" value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/parking/freespace_planner/freespace_planner.param.yaml"/>

                          </include>
                  </group>
          </group>
          <!-- planning validator -->
          <group>
                  <include file="$(find-pkg-share planning_validator)/launch/planning_validator.launch.xml">
                          <arg name="input_trajectory" value="/planning/scenario_planning/motion_velocity_smoother/trajectory"/>
                          <arg name="output_trajectory" value="/planning/scenario_planning/trajectory"/>
                          <arg name="planning_validator_param_path" value="$(find-pkg-share autoware_launch)/config/planning/scenario_planning/common/planning_validator/planning_validator.param.yaml"/>
                  </include>
          </group>

  </group>

  <!-- Control -->
  <group if="$(var launch_control)">
      <include file="$(find-pkg-share autoware_launch)/launch/components/tier4_control_component.launch.xml">
      <arg name="vehicle_param_file" value="$(find-pkg-share $(var vehicle_model)_description)/config/vehicle_info.param.yaml"/>
      <arg name="vehicle_id" value="$(var vehicle_id)"/>
      <arg name="enable_obstacle_collision_checker" value="$(var enable_obstacle_collision_checker)"/>
      <arg name="lateral_controller_mode" value="mpc"/>
      <arg name="longitudinal_controller_mode" value="pid"/>
      <arg name="use_individual_control_param" value="false"/>
    </include>
  </group>

  <!-- sensing -->
  <group if="$(var launch_sensing)"> 
     <push-ros-namespace namespace="sensing"/>
  	  <!-- GNSS -->
	  <group>
		  <push-ros-namespace namespace="gnss"/>
		  <!-- Switch topic name -->
		  <let name="navsatfix_topic_name" value="novatel/oem7/fix"/>
		  <let name="odom_topic_name" value="novatel/oem7/odom"/>
		  <let name="orientation_topic_name" value="/autoware_orientation"/>

		  <!-- Novatel Driver -->
		  <group>
			  <include file="$(find-pkg-share novatel_oem7_driver)/launch/oem7_net.launch.py">
				  <arg name="oem7_ip_addr" value="192.168.74.10"/>
				  <arg name="oem7_port" value="3003"/>
				  <arg name="oem7_if" value="Oem7ReceiverUdp"/>
			  </include>
		  </group>

		  <!-- NavSatFix to MGRS Pose -->
		  <include file="$(find-pkg-share gnss_poser)/launch/gnss_poser.launch.xml">
			  <arg name="input_topic_fix" value="$(var navsatfix_topic_name)"/>
			  <arg name="input_topic_odom" value="$(var odom_topic_name)"/>
			  <arg name="input_topic_orientation" value="$(var orientation_topic_name)"/>

			  <arg name="output_topic_gnss_pose" value="pose"/>
			  <arg name="output_topic_gnss_pose_cov" value="pose_with_covariance"/>
			  <arg name="output_topic_gnss_fixed" value="fixed"/>
			  <arg name="output_topic_gnss_odom" value="odom"/>

			  <arg name="coordinate_system" value="$(var coordinate_system)"/>
			  <arg name="use_gnss_ins_orientation" value="true"/>

			  <arg name="gnss_frame" value="gnss_link"/>
		  </include>

	  </group>
  </group>

  <!-- localization -->
    <group if="$(var launch_localization)">

	    <push-ros-namespace namespace="localization"/>
	    <group unless="$(var vehicle_simulation)">

		    <!-- pose_initializer -->
		    <group>
			    <include file="$(find-pkg-share pose_initializer)/launch/pose_initializer.launch.xml">
				    <arg name="common_config_file" value="$(var pose_initializer_common_param_path)"/>
				    <arg name="config_file" value="$(var pose_initializer_param_path)"/>
				    <arg name="sub_gnss_pose_cov" value="/sensing/gnss/pose_with_covariance"/>
			    </include>
		    </group>

		    <!-- pose_initializer (Automatic call from AD API) -->
		    <group>
			    <include file="$(find-pkg-share automatic_pose_initializer)/launch/automatic_pose_initializer.launch.xml"/>
		    </group>

		    <group>
			    <include file="$(find-pkg-share stop_filter)/launch/stop_filter.launch.xml">
				    <arg name="use_twist_with_covariance" value="False"/>
				    <arg name="input_odom_name" value="/sensing/gnss/odom"/>
				    <arg name="output_odom_name" value="/localization/kinematic_state"/>
			    </include>
		    </group>

		    <group>
			    <include file="$(find-pkg-share twist2accel)/launch/twist2accel.launch.xml">
				    <arg name="use_odom" value="true"/>
				    <arg name="in_odom" value="/localization/kinematic_state"/>
				    <arg name="in_twist" value="/localization/twist_estimator/twist_with_covariance"/>
				    <arg name="out_accel" value="/localization/acceleration"/>
			    </include>
		    </group>
	    </group>

	    <!-- localization_error_monitor_module -->
	    <group>
		    <include file="$(find-pkg-share tier4_localization_launch)/launch/localization_error_monitor/localization_error_monitor.launch.xml"/>
	    </group>
    </group>

  <!-- API -->
    <group if="$(var launch_perception)">
	    <group if="$(var launch_dummy_apa_perception)">
		    <!-- Dummy APA perception-->
		    <include file="$(find-pkg-share motovis_interface)/launch/motovis_interface.launch.xml"/>

		    <!-- launched only when its not simulation because in simulation dummy percpetion is already
		    launched-->
		    <group unless="$(var vehicle_simulation)">
			    <include file="$(find-pkg-share dummy_perception_publisher)/launch/dummy_perception_publisher.launch.xml">
				    <arg name="real" value="$(var perception/enable_detection_failure)"/>
				    <arg name="use_object_recognition" value="$(var perception/enable_object_recognition)"/>
				    <arg name="visible_range" value="$(var sensing/visible_range)"/>
			    </include>

			    <!-- Occupancy Grid -->
			    <push-ros-namespace namespace="occupancy_grid_map"/>
			    <include file="$(find-pkg-share tier4_perception_launch)/launch/occupancy_grid_map/laserscan_based_occupancy_grid_map.launch.py">
				    <arg name="input_obstacle_pointcloud" value="true"/>
				    <arg name="input_obstacle_and_raw_pointcloud" value="false"/>
				    <arg name="input/obstacle_pointcloud" value="/perception/obstacle_segmentation/pointcloud"/>
				    <arg name="output" value="/perception/occupancy_grid_map/map"/>
			    </include>

		    </group>
	    </group>
    </group>

  <!-- API -->
  <group if="$(var launch_api)">
    <include file="$(find-pkg-share tier4_autoware_api_launch)/launch/autoware_api.launch.xml"/>
  </group>

  <!-- Joystick controller -->
  <group if="$(var launch_joy)">
	  <include file="$(find-pkg-share joy_controller)/launch/joy_controller.launch.xml"/>
  </group>

  <!-- Rviz -->
  <group if="$(var launch_viz)">
	  <node pkg="rviz2" exec="rviz2" name="rviz2" output="screen" args="-d $(var rviz_config) -s $(find-pkg-share autoware_launch)/rviz/image/autoware.png" if="$(var rviz)"/>
  <!--RQT Robot Monitor -->
	  <node pkg="rqt_robot_monitor" exec="rqt_robot_monitor" name="rqt_robot_monitor" output="screen"/>
  </group>
</launch>
